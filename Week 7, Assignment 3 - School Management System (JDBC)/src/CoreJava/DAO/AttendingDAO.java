package CoreJava.DAO;

import java.sql.Statement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

import CoreJava.CustomExceptions.StudentRegistrationException;
import CoreJava.Models.Attending;
import CoreJava.Models.Course;
import CoreJava.Models.Student;
import CoreJava.systemsInterfaces.AttendingDAOI;

public class AttendingDAO implements AttendingDAOI {

	/**
	 * This method takes as a parameter a Student and a Course object. 
	 * If the student’s GPA id greater or equal to the minimum GPA of 
	 * the course then the student is allow to register to the course. 
	 * If not, then throw the StudentRegistrationException with a 
	 * custom massage such as “\nDid not meet the minimum GPA 
	 * requirement\nRegistration Denied”. Since you are creating a 
	 * new record in the database, return the primary key auto-generated by the database.
	 * @param student.
	 * @param course.
	 * @author RaynerMDZ.
	 * @throws StudentRegistrationException 
	 */
	@Override
	public int registerStudentToCourse(Student student, Course course) throws Exception {
		
		OracleConnection oracleConnection = new OracleConnection();
		Connection connection;
		
		if (student.getGpa() >= course.getMinimum_gpa()) {
			
            System.out.println("Student meets GPA requirment for course " + course.getCourse_name());
            System.out.println("Attempting to register . . .");
             
            try {
            	
                connection = oracleConnection.getConnection();
                
                //Check if the student is already attending the course and return attending ID
                PreparedStatement preparedStatement;
                preparedStatement = connection.prepareStatement(queries.CHECK_IF_ATTENDING.getQuery());
                preparedStatement.setInt(1, course.getCourse_id());
                preparedStatement.setInt(2, student.getStudent_id());
                
                ResultSet resultSet = preparedStatement.executeQuery();
                
                if (resultSet.next()) {
                    System.out.println("Student already registered");
                    return resultSet.getInt(1);
                }
                
                //Register student to course and return the newly created attending ID
                else {
                    preparedStatement = connection.prepareStatement(queries.ADD_STUDENT_TO_ATTENDING.getQuery());
                    preparedStatement.setInt(1, course.getCourse_id());
                    preparedStatement.setInt(2, student.getStudent_id());
                    resultSet = preparedStatement.executeQuery();
                    System.out.println("Successful!");
                    
                    Statement statement = connection.createStatement();
                    resultSet = statement.executeQuery(queries.GET_ATTENDING_ID.getQuery());
                    resultSet.next();
                    return resultSet.getInt(1);
                }
            } catch (Exception e) {
                System.out.println("Error");
            }
        }
       else {
           throw new StudentRegistrationException("\nDid not meet the minimum GPA requirement\nRegistration Denied");
       }
       return -1;
		
	}

	/**
	 * This method takes as a parameter a int student_id and would query 
	 * the database for all the courses a student is register base on the Id
	 * @param student_id.
	 * @author RaynerMDZ.
	 */
	@Override
	public List<Attending> getStudentCourse(int student_id) {
		
		OracleConnection oracleConnection = new OracleConnection();
		
		List<Attending> attendingList = new ArrayList<>();
		
		try {
			
			Connection connection = oracleConnection.getConnection();
			
			PreparedStatement preparedStatement = connection.prepareStatement(queries.GET_STUDENT_COURSES.getQuery());
			preparedStatement.setInt(1, student_id);
			
			ResultSet resultSet = preparedStatement.executeQuery();
			
			while (resultSet.next()) {
				
				attendingList.add( new Attending(resultSet.getString(1), resultSet.getString(2), resultSet.getString(3)));
			}
			return attendingList;
			
		} catch (Exception e) {
			System.out.println("Student not found!");
		}
		return null;	
	}

}
